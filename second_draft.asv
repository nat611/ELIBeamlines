% Loading folder
folders = {
    "/Users/Nathalie/Desktop/ELI Beamlines/Unknown sample etched at 1h/011/5um"...
    "/Users/Nathalie/Desktop/ELI Beamlines/Unknown sample etched at 1h/011/10um"...
    "/Users/Nathalie/Desktop/ELI Beamlines/Unknown sample etched at 1h/011/15um"...
    "/Users/Nathalie/Desktop/ELI Beamlines/Unknown sample etched at 1h/011/20um"
};

% Corresponding energy calculation parameters (modify these as needed)
energy_params = {
    [682.6644, 0.23035, 0.28154, 1.93188]... %5um
    [631.08205, 0.23048, 0.2817, 3.05766]... %10um
    [616.50833, 0.23104, 0.28238, 3.23259]... %15um
    [586.80959, 0.23051, 0.28173, 4.40957] %20um
};



% Preallocate arrays for combined results
all_x_axis = {};
all_y_axis = {};

% Loop through each folder
for f = 1:length(folders)
    folder = folders{f};
    params = energy_params{f};

    % Loading images
    filePattern = fullfile(folder, '*.tif'); 
    tifs = dir(filePattern); 

    num_images = length(tifs); %initialising number of images and empty arrays 
    images = cell(1, num_images); 
    masks = cell(1, num_images); 
    all_blobs = []; 

    for k = 1:num_images %looping through files and reading each image 
        baseFileName = tifs(k).name;
        fullfileName = fullfile(folder, baseFileName);
        I = imread(fullfileName); 
        RGBimage = I(:, :, 1:3); % reducing from 4 chanels 
        images{k} = RGBimage; %stores image at I

        %convert to greyscale
        I_8bit= im2gray(RGBimage);

        %threshold the image
        bw = I_8bit < 115; 

        %watershed & fill holes 
        bw_filled=imfill(bw,'holes'); %filling holes 
        bw_filled_blur = imgaussfilt(double(bw_filled), 1); %blurring for watershedding 

        D = -bwdist(~bw_filled_blur); %distance transformation for watershed 
        W = watershed(D); %watershed transformation 

        W(~bw_filled) = 0; %anything that isnt in original fill holes goes to zero (retains area) 
        bw_watershed = W==0;
    
        masks{k}=~bw_watershed; %saving as mask 

    end 

    %defining scale and circularity 
    scale= 4.86; 
    circularity_threshold = 0.9;

    for n=1:numel(masks) %looping through masks to identify objects 
        % Find boundaries
        [B,L] = bwboundaries(masks{n}, 'noholes',TraceStyle='pixeledge');

        %reigonprops
        stats = regionprops(L,"Circularity", "Centroid", "Area", "Perimeter"); 
        figure; 
        imshow(L);
        hold on

        %looping through each boundary element
        blobs = [];
        for j = 1:length(B)
            boundary=B{j}; 
            circularity = stats(j).Circularity; %setting circularity limit
            if circularity > circularity_threshold 
                %scaled area 
                area = stats(j).Area;
                scaled_area= area/scale^2;
                if scaled_area > 1 && scaled_area < 7 %area limits (from calibration) 
                    plot(boundary(:,2), boundary(:,1), 'cyan', 'LineWidth', 2); %plotting boundaries
                    blobs = [blobs scaled_area]; %saving boundary data 
                end
            end     
        end
        drawnow %plotting 
        title('perimeters');  
        all_blobs = [all_blobs blobs]; %saving each individual image data 
    end 
    % save all data 
    csvwrite('all_blobs.csv', all_blobs');

   % calculating diameters
    diameters = arrayfun(@(area) sqrt((area * 4) / pi), all_blobs);
    % save diameters
    csvwrite(fullfile(folder, 'all_blobs_diameters.csv'), diameters'); 

    % unique areas and their frequency
    [unique_blobs, ~, indices] = unique(all_blobs);
    counts = histcounts(indices, length(unique_blobs));
    csvwrite('counts.csv', counts');
    csvwrite('unique_blobs.csv', unique_blobs');

    %calculating unique diameters 
    unique_diameters = arrayfun(@(area) sqrt((area * 4) / pi), unique_blobs);
    csvwrite(fullfile(folder, 'unique_diameters.csv'), unique_diameters');

    %calculations
    %energy calc 
    energies= []; 
    energies_calc = params(1) * exp(-(unique_diameters) / params(2)) + ...
                   params(1) * exp(-(unique_diameters) / params(3)) + params(4);
    
    energies = [energies energies_calc]; 

    %change in energy
    energy_difference = []; 
    energy_diff_calc = abs(diff(energies)); 
    if energy_diff_calc <length(counts) %the energy_difference is empty...
        energy_diff_calc(end + 1) = energy_diff_calc(end);
    end
    energy_difference= [energy_difference energy_diff_calc];

    %solid angle 
    CR_area = ((395.0617*10^-6)*(246.9135*10^-6)); 
    distance = 52.5*10^-2;
    solid_angle = CR_area/((distance)^2); 
    number_of_shots= 62; 
    sr_s= solid_angle*number_of_shots; 

    % Apply diameter limits (1.3 to 2.7)
    diameter_limits = unique_diameters > 1.32566 & unique_diameters < 2.76630;
    filtered_diameters = unique_diameters(diameter_limits);
    filtered_counts = counts(diameter_limits);
    filtered_energies = energies(diameter_limits);
    filtered_energy_diff = energy_difference(diameter_limits);

    %dN/dE: 
    dN_dE = filtered_counts ./ filtered_energy_diff;
    csvwrite('dN_dE.csv', dN_dE);

    % plot histogram with unique areas 
    figure;
    bar(unique_blobs, counts); % plot frequency of each unique area
    hold on;

    % labels and title
    title('Number of Particles VS Area (5um)');
    xlabel('Area');
    ylabel('Number of Particles');


    %axies
    y_axis = dN_dE / sr_s;
    x_axis = filtered_energies;

    % Store for final combined plot
    all_x_axis{f} = x_axis;
    all_y_axis{f} = y_axis;
end

%plotting mean line of best fit 
p = polyfit(all_x_axis, all_y_axis, 1);

% 3. Evaluate the polynomial at the x values
y_fit = polyval(p, all);

%plotting energy distributions
figure;
hold on;
colors = {'r', 'g', 'b', 'k'}; % Different colors for each folder
markers = {'o', 's', 'd', '^'}; % Different markers for each folder

for f = 1:length(folders)
    semilogy(all_x_axis{f}, all_y_axis{f}, markers{f}, 'Color', colors{f}, 'DisplayName', sprintf('%dum', 5*f)); 
end

% Add labels, title, and legend
xlabel('Energy (MeV)');
ylabel('(dN/dE)/(sr*shot)');
title('Energy Distribution for Different Diameters');
legend show;